\chapter{Introduction}
\setcounter{page}{1}
	\section{Overview of the FYP}
	    \begin{multicols*}{2}
		\paragraph{}
			The concept of this project is to provide a Linux port of the Windows Group Policy Object (GPO) editor and a means 
			to deploy these policies to a multitude of ‘Gnu’s not Unix’ (GNU) systems through a common non-ambiguous domain specific 
			language (DSL). 
			\index{Domain Specific Language} 
			\index{Group Policy} 
			\index{Policies} 
			\newline
			\newline
			Throughout this over view I will ease the reader into the domain concepts by providing the relationships with the Windows world.
			However as the overview progresses less comparisons will be made.  As really we are mixing our apples and oranges.  
			\newline
			\newline
			Group policy in the windows world provides administrators with an easy interface to control aspects of computer policies in an 
			easy defined manner.  Any computer joined to the domain is subject to these policies.  Administrators can, with the aid of visual
			snap-ins for Active directory, modify key-value pairs, which represent all the different aspects of a windows computer.  
			Furthermore with the interoperability or backwards compatibility built in, each successive release of windows conforms to 
			the standards or provides a translation pair relevant that that specific version of windows. 
			\index{Active Directory} 
			\index{Group policy}
			\index{Policies} 
			\index{Domain} 
			\index{key-value pairs} 
			\index{Interoperability} 
			\newline
			\newline
			Before the advent of the Windows Registry configurations for programs where kept in INI files, broken up into sections and properties.
			\index{Registry} 
			\index{INI files}
			\newline
			\newline
			[section]
			\newline
			property=value
			\newline
			\newline
			As the complexity of vendor applications and the operating system as a whole grew, so did the size of these INI files.  
			Furthermore for interoperability and the sharing of dynamic link libraries, which depended on these INI configurations, 
			it was quickly realized that this was an inefficient manner of storing configurations.  The Windows Registry solved this issue 
			by centralizing configurations settings into a hierarchical database containing settings for low-level operating system settings 
			as well as settings for applications running on the platform.  
			\index{Interoperability} 
			\index{INI files} 
			\index{Registry} 
			\index{Dynamic link libraries}
			\newline
			\newline
			Now that Windows has a central place for settings on the local machine, this provided an interface for a server (domain controller) 
			to apply settings to groups of machines also known as Group Policy. 
			\index{Group Policy} 
			\index{Domain controller} 
			\newline
			\newline
			Given this brief overview of Windows Group Policy, lets take a look at the ``Gnu’s not Unix'' (GNU) systems. 
			Since to conception of Linux in 1992 and the accompanied ‘Gnu’s not Unix’ (GNU) applications, file configuration settings still
		    remains the de facto way of configuring these systems and their application preferences.   The style of these configuration files 
		    is somewhat similar to that of INI files in that there is key/value pairs; differing in how comments are written.
			\index{Group Policy} 
			\index{INI files}
			\newline
			\newline
			As Linux grow in popularity in the business sector for backend main frames due to its stability and security, a need was required 
			for a centralized management of all these machines and a common login infrastructure to allow users and administrators to have
			credentials common to the network as a whole.  Yellow Pages (YP) also known as network infrastructure services (NIS) offered 
			this client server distributed system of authenticating users on a network.  
			\index{Yellow pages} 
			\index{Network infrastructure services}
			\newline
			\newpage
			Configuration data compiling of user and group information along with hosts on the domain name system (DNS) domain allow for 
			this seamless user interaction between computers, but did not do much in allowing for administrators to manage these machines 
			in the central location.
			\index{Domain name system} 
			\newline
			\newline
			At this point I think it's important to look at the word ``domain'' as it will be used in contextually and comparatively, 
			extensively throughout this document.
			\newline
			\newline
			``The Domain Name System (DNS) is a hierarchical, distributed database that contains mappings of DNS domain names to various types 
			of data, such as Internet Protocol (IP) addresses. DNS allows you to use friendly names, such as www.microsoft.com, to easily 
			locate computers and other resources on a TCP/IP-based network. DNS is an Internet Engineering Task Force (IETF) standard.''
			\cite{MicrosoftGlossary} 
			\newline
			\newline
			``A Windows is a collection of computers in a networked environment that share a common database, directory database, or tree. 
			A domain is administered as a unit with common rules and procedures, which can include security policies, and each domain has 
			a unique name.''
			\cite{MicrosoftGlossary} 
			\newline
			\newline
			``A NIS ( Linux ) domain is similar to the Windows NT® domain system; although the internal implementation of the two are not 
			at all similar, the basic functionality can be compared.''
			\cite{FREEBSD}  
			\newline
			\newline
			``A domain as a field of scope or activity comprised of a specific knowledge set.'' 
			\newline
			\newline
			With reference to the definition of a windows domain it is important as a constitute part of this report to acknowledge the 
			concept of a domain as a group of computers.  Although this may create ambiguity and defer from the scope of the application, 
			it is however prominent to the concept and to that of the business terminology.  The term DNS domain or domain name will be 
			used as a reference to the identification label that defines an address, more commonly associated with the web in the form of 
			uniform resource locator (URL). And of course the term domain, by itself a reference a set of specific knowledge.
			\newline
			\newline
			Moving on from these definitions lets take a look at the problem domain.  Each individual major version of Linux distribution 
			provides utilities specific to controlling that machine and the settings therein.  These utilities in some cases modify file 
			configurations as previously discussed, For example, software provisioning is provided via ``yum'' on Redhat systems and ``apt'' 
			on Debian systems. Furthermore Redhat provides the tools ``chkconfig'' and ``service'' in controlling boot up configuration and 
			instant control respectively, while Debian provides similar tools.  As we start to compare the major distributions we start 
			to see the contrasting yet similar disparate natures of the utilities provided by the vendors.  
			\newline
			\newline
			Even though the underlying well-worn technologies that provide the backend implementation are primarily the same.  
			The tools provided to control and implement changes on these disjoint systems although comparatively different from a usage 
			perspective provide the same functionality.  This brings about the need for extremely skilled well-versed technicians and of 
			course creates more work from an administrative point of view.
			\newline
			\newline
			Given the success of group policy in the windows domain this seems like a logical candidate in tackling these systems as a whole.  
			By providing a framework to manage these contrasting systems through the use of a domain specific language.  
			\newline
			\newpage
			An abstraction layer over the contrasting differences could theoretically be designed to remove the requirement in understanding 
			all these systems and thereby reducing the need for administrators to be learned in a plethora of distribution specific commands.  
			Martin Fowler makes this argument from a contrasting point of view in terms of Language Oriented programming, by replacing a few 
			general purpose programming languages with many domain specific languages, he hypothesis that the requirement to learn numerous 
			application programmers interfaces can be more of a burden than learning a domain specific language catered for an individual task.
			\newline
			\newline
			Given this proposition for an abstraction layer to provide domain specific commands to a heterogeneous Linux environment and the 
			need for controlling these systems from a group policy perspective, a domain specific language seems an obvious candidate in 
			delivering a solution.  We will look further at this concept in the following sub sections of chapter one where we define the scope, 
			the objectives and terminology associated with this motive.
			\newline
			\newline
			Now that we have an overview of what the problem domain is and a vague idea of how it can be tackled, lets contrive the other 
			components.  Firstly the Client Server Model envisioned by the idea of a central authority, The domain specific language as the 
			intermediate language to provide instructions to the client, the schema for the specification of the database; where polices will 
			be created and stored and finally the administrative server front end which will be an over view of the application and how it 
			should enable administrators to create an modify policies for the underlying components.
	    \end{multicols*}		
	\section{Brief Introduction to Concepts and Terminology}
		\begin{multicols}{2}
		\paragraph{}
			A Directory service is a software system that stores, organizes and provides access to a hierarchical database known as a directory
			information base (DIB).  This directory information base (DIB) is stored as object classes with each named attribute mapped to 
			one or more values. 
			\newline
			\newline
			These object classes consisting of organizational units (OU), common names (CN) etc. are identified by a distinguished name (DN).  
			A distinguished name is a concatenation of these attributes from a series of entries.  A relative distinguished name (RDN) is the 
			tree along the path from the root to the named entry.  In the below example we have introduced more of the grammar associated with 
			a directory information base (DIB) lookup as well as the syntax.  
			\newline
			\newline
			The distinguished name (DN) at the beginning followed by the lookup in right to left order.   As that of a fully qualified domain 
			name (FQDN) www.csis.ul.ie, the top of the tree is IE followed by UL, CSIS and so on.  In figure 1 for illustrative purposes 
			I have ordered it from left to right, as this is how most people visualize it. 
		\end{multicols}	
		“DN:  cn=J.J Collins + uid=j.jcollins, ou=Lecturers, dc=ul, dc=ie”
		\newline	   
		\begin{figure}[h!]
			\centering
			\includegraphics{figures/diblookup.png}
		  	\caption{Directory Information Base Lookup}
		\end{figure} 
		\newline
		In this diagram we can identify five separate relative distinguished names (RDN). 
		\newline 
		RDN : dc=ie
		\newline
		RDN : dc=ul,dc=ie
		\newline
		RDN : ou=Lecturers, dc=ul,dc=ie
		\newline
		RDN : cn=J.JCollins,ou=Lecturers, dc=ul,dc=ie.
		\newline
		\newline  
		We can also identify an attribute signified by the plus symbol in the first example.
		\newline
		+ uid which is also an RDN.
		\newline
		\newline
		RDN : cn=J.JCollins + uid=j.jcollins,ou=Lecturers, dc=ul,dc=ie
		\newline
		\newline
		\newpage
		\begin{multicols}{2}
		\paragraph{}
			The Domain Name System (DNS) is a hierarchical naming system for computers, services and any other resource identified by an 
			Internet Protocol (IP) address.  It associates names to nodes on a network known as uniform resource locators (URL).
			\newline
			\newline
			Before the advent of the Domain Name System (DNS), nodes relied on stored name/IP address pairs in a file called hosts.  
			When name lookups were requested, this text file was queried which resolved a name to an IP address.  As the networks grow in 
			size so did this hosts file and this became unsustainable.
			\newline
			\newline
			Two namespaces make up the domain hierarchy, the name address space and the Internet Protocol (IP) address.  The domain name server 
			maintains the mappings between the names and the Internet Protocol (IP) addresses.  Henceforth the Domain Name server stores records 
			such as address (A) records, name server (NS) records and mail exchanger (MX) records, as well some 30 other types.  When request from 
			a client is not found on a name server it requests it from its name servers thereby creating the physical hierarchy.
			\newline
			\newline
			Clients make requests to the name server using its Internet Protocol (IP) address.  These requests are sent to the server on 
			port 53 in a similar fashion to the way a host would query the hosts file.  The server receives the name request, performs the 
			lookup and sends the Internet Protocol (IP) address pair mapping back to the client. 
			\newline
			\newline
			This process is further facilitated by the dynamic host configuration protocol (DHCP) which provides dynamic Internet Protocol (IP)
			assignments to requesting clients.  A dynamic host configuration protocol (DHCP) client running on a client machine broadcast a 
			request to 255.255.255.255 that is reserved for broadcast traffic. 
			\newline
			\newline 
			The dynamic host configuration protocol (DHCP) server listening for this broadcast traffic sends a response using the same method back 
			to the client consisting of an Internet Protocol (IP) address, a gateway address which is the host that joins to two networks together, 
			the broadcast address for the network and the domain name servers that the client can query for name resolving.
			\newline
			\newline
			The domain name space is split up logically in zones beginning at the root zone.  The sub zones are namespaces which Internet 
			Corporation for Assigned Names and Numbers (ICANN) has delegated administrative responsibility.
			\newline
			\newline
			Domain names are split up labels concatenated by full stops.  For example the right most label in the fully qualified domain name 
			(FQDN) \url{www.csis.ul.ie} being IE represents the top-level of the hierarchy to which authority has been delegated to Irelands Domain 
			Registry (IEDR).
			\newline
			\newline
			\begin{figurehere}
				\includegraphics[scale=0.65]{figures/dnshier.png}
				\caption{Domain name system hierarchy}
			\end{figurehere}
		\end{multicols}
		\newpage
		\begin{multicols}{2}
		\paragraph{}
			The X.500 specification is an amalgamation of computer networking standards for electronic directory services.  These standards 
			built upon Open systems Interconnect (OSI) networking stack were the first approved implementation of the directory services.  
			The X.500 originally consisted of four main protocols, Directory Access Protocol (DAP), the Directory System Protocol (DSP), 
			the Directory Information Shadowing Protocol (DISP) and the Directory Operational Bindings Management Protocol (DOP).
			\newline
			\newline
			The Directory Access Protocol (DAP) or X.511 standard promulgated in 1998 by Open systems Interconnect (OSI) is used by client 
			computers as a means of querying the directory services.  The query operations including bind, read, list, search, add, compare 
			modify and delete.  This protocol has long since been abandoned in favor of use of the Lightweight Directory Access Protocol (LDAP) 
			which was implemented using the transmission control protocol/internet protocol (TCP/IP), which supports extensibility as well as 
			introducing extensive error handling.  
			\newline
			\newline 
			The Lightweight Directory Access Protocol (LDAP) introduced amongst the most relevant advancements, Transport Later Security (TLS), 
			the abandon operation allowing the client server to abandon a request and the Extended Operation used to define other operations.
			Standalone servers soon followed supporting both the Lightweight Directory Access Protocol (LDAP) and Directory Access Protocol (DAP).  
			The next most prominent component of the X.500 specification was the Directory Services Protocol (DSP), which outlines the 
			communication specification between the Directory Services Agent (DSA) and the Directory User Agent (DUA).   The directory services 
			protocol controls the interaction between the user agents (clients) and the Services agent (server).
			\newline
			\newline
			The Directory Information Shadowing Protocol (DISP) described in the X.525 and X.519 specifications outlines the protocols and 
			procedures for the replication of directory information.  Replication being the act of copying from one Directory Services Agent (DSA) 
			to another.  This operation is generally achieved with the man in the middle approach (chaining and referrals), this ensures 
			synchronization of data and reduces mismatch between Directory Services Agent’s (DSA) shown below.
			\newline
			\newline
		\end{multicols}
		\begin{figure}[h!]
			\centering
			\includegraphics{figures/x500shadow.png}
		  	\caption{X.500 master and shadow servers}
		\end{figure}
		\newpage
		\begin{multicols}{2}
		\paragraph{}
			The Directory Operational Bindings Management Protocol (DOP) was proposed to deal with the problem of multiple Directory Services 
			Agent’s (DSA); where no clear defined master could be identified.  Unlike the previous example of chaining and referrals the 
			relationship is clear.  
			\newline
			\newline 
			A shadow holds a subset of the master directory.  If the shadow does not have some information is refers it to the master.  
			But what if we have more than one master?  There is no clear chain of responsibility.   Therefore a relationship of responsibility 
			between the co-operating Directory Services Agent’s (DSA) must be established.  
			\newline
			\newline
			Two different types of operational binding were standardized, the Hierarchical Operational Binding (HOB) and the Shadow Operational 
			Binding (SOB).  These binding states allowed for the disjoint parts of a directory services to conglomerate seamlessly, aware of 
			what each other’s responsibilities were.  Consider the below figure.
			\newline
			\newline
		\end{multicols}
		\begin{figure}[h!]
			\centering
			\includegraphics{figures/x500binding.png}
		  	\caption{X.500 binding protocol}
		\end{figure}
		\newpage
		\begin{multicols}{2}
		\paragraph{}
			Network Information Services (NIS) previously known as Yellow Pages, is a client server directory services technology used for 
			network logins.   The Network Information Services (NIS) server (ypserv) distributes maps of resources, typically 
			Network File System (NFS) shares on a network as well as the contents of ‘/etc/passwd’, ‘/etc/shadow’ and ‘/etc/group’.  
			\newline
			\newline
			A client bound to the server using the (ypbind) client automatically binds at boot.  When I user attempts a login on a client a 
			machine the pluggable authentication module (PAM) loads the authentication modules in the order defined in the file 
			‘/etc/nsswtich.conf’,  For eg. ‘passwd: files nis ldap’.
			\newline
			\newline
			If the login information is not found in the local ‘/etc/passwd’ file, the pluggable authentication module (PAM) loads the next 
			login module in this case defined as ‘nis’.
			\newline
			\newline
			The maps distributed by (ypserv) are then checked and if the user is found authenticated, if not it then fails onto the next 
			authentication module until eventually failing to login and subsequently notifying the user.
			\newline
			\newline
			As previously mentioned one of the maps provided by Network Information Services (NIS) being Network File System (NFS) shares are 
			typically also used during the login process.  One of the secondary objectives of Network Information Services (NIS) is to make 
			available user resources on any networked machine they login to.  
			\newline
			\newline
			This is done using these maps and another application called ‘autofs’ or ‘automount’.  This map of shares defines the location 
			of a user’s home directory in the form of the local mount point and the network resource location where is home files are kept. 
			For example ‘/home/dave   10.1.1.1:/home/dave’.
			\newline
			\newline 
		\end{multicols}
		\newpage
		\begin{multicols}{2}
		\paragraph{}
			Active directory is a directory service technology created by Microsoft and is included with Windows Server.  Active directory 
			serves primarily as a network administration and security backbone, but also provides advanced configuration of client machines 
			in the form of group policy, which is highly sought after in the Linux community and the motivation of this project.
			\newline
			\newline
			The structure of Active Directory is similar to that of the X.500 structure when multiple master domains are present.  
			These levels are logically divided into Forests, Tree and domains.  A tree being the most common implementation of organizations 
			Directory Services architecture is a collection of domains in contiguous space with an implicit transitive trust hierarchy. 
			\newline
			\newline 
			For example, Intel Corporation’s tree is split into five domains.  Each domain represents a region in the world.  If I user from 
			the greater Europe region attempts to access a machine in the American region, the target machine asks the domain controller for 
			that region for authorization of the users account.  As the account does not exist in the American domain the domain controller 
			transitions the login request to the European domain controller which authorizes the login, envisioning the trust.  The authorization 
			is then cached on the American domain controller for later login requests.
			\newline
			\newline
			The domains themselves are further sub divided into Organizational Units.  Typically computer objects are grouped together and 
			user accounts are grouped together.  These organizational units can be further sub divided into smaller units creating a 
			hierarchical structure.  Group policies as previously discussed in 1.1 are attached to these organizational units.  
			\newline
			\newline
			As default each organizational unit has a default policy associated with it.  This default policy attributes are not configured as 
			default, meaning nothing will be modified on the target machine or adjusted on a users account.  An administrator then modifies 
			this policy, which is applied to the hierarchy top down in an inherited fashion.  A top-level policy can be over ridden by a 
			sub-level policy allowing for granular control of the sub units without having to have repeated policies within the hierarchy.
			\newline
			\newline
		\end{multicols}
		\begin{figure}[h!]
			\centering
			\includegraphics[scale=0.8]{figures/activedirectoryforest.png}
		  	\caption{Active directory domain heirearchy}
		\end{figure}
		\newpage
		\begin{multicols}{2}
		\paragraph{}
			Many Linux Configuration tools exist for both local and remote administration.  There has been varying degrees of success in 
			these solutions most notably with cfengine.  
			\newline
			\newline
			One of the core issues with cfengine is the requirement of the administrator to define policies via its domain specific language 
			similar to that of Javascript Serialized Object Notation (JSON).  This notation while catering for a wide variety of 
			configuration possibilities falls short of being truly easy to use as a result of the implementation’s huge vocabulary.  
			Furthermore it still requires expert knowledge in all the varying Linux systems, as each policy has to be coded by handed requiring 
			the administrator to aware of all the varying configurations and implementations of the client machines.  There is no front end or 
			point and click interface that comparable in anyway of the of Windows Group Policy Editor.
			\newline
			\newline
			The second most notable configuration management application being BCFG2 provides software provisioning and configuration.  
			The policies are written in Extendable Mark-up Language (XML).  Each individual system and its configuration have to be addressed 
			once again requiring a domain expert.  The system is pluggable however unlike cfengine allowing administrators to extend its 
			functionality.  No front end for the configuration of the policies exists other than industry standard tools for specifying 
			and validating xml. 
			\newline
			\newline
			Chef the third most notable Linux configuration manager distributes policies in the form of an internal domain specific language 
			(DSL).  Cookbooks, which define the policies, are short snippets of ruby code evaluated and executed by the client.  This solution 
			although very powerful and does not require the extensive learning of that of cfengine but does however require the Administrator 
			to be familiar with the ruby general-purpose language.  The solution does not abstract the domain specific knowledge set and 
			still requires expert knowledge.
			\newline
			\newline
		\end{multicols}
	\newpage
	\section{Objectives}
		\subsection{Client server model}
		    \begin{multicols}{2}
			\paragraph{}
				Centralized management being the theme of this report establishes the inception of the concept of a central
			    authority and therein a client server model.   In recent years this paradigm has shifted towards the distributed
			    computing concept of a distributed hash table (DHT) decentralizing data allowing clients to operate without 
			    access to the original source.
				\newline
				\newline
				Promise theory a model of voluntary cooperation proposed by Mark Burgees (2004) would potentially 
				allow clients to publish policies to one another in the form of promises.    
				A declaration of intent known as a promise, if kept increases the recipient's confidence about a claim 
				of authority.   An un-kept promise decreases the authority of a client.  
				Thus the authority and trust relationship is symbiotic. (BURGESS, Mark)
				\newline
				\newline
				The profound affects of this allow for greater redundancy and scalability, 
				it does not however negate the need for a central authority but reduces the need for a 
				guaranteed reliable server while increasing the outreach and manageability of large scaled environments. 
				\newline
				\newline
				When we talk about central authority the first question that comes to mind, is the idea of fault tolerance.  
				Is the server going to be able to manage ten thousand clients connecting to it? 	
				\newline
				\newline
				One of the fundamental requirements of such an implementation is to provide a client 
				server model that can operate on a multitude of different systems with varying revisions of supporting packages.  
				Therefore for highest availability possible the client server will be implemented with the use of the 
				Practical Extraction and Reporting Language (PERL).  
				Perl is shipped as standard in all distributions of GNU systems.  
				This is will provide the highest availability possible, but what about scalability?  
				We will talk about this later. 	
		    \end{multicols}
		\subsection{Domain specific language}	
		\subsection{Directory services schema}		
		\subsection{Administrator front end}	
	\section{Scope}
	\section{Contribution}
	\section{Methodology}
	\section{Overview of this Report}
